billing software report 2


SELECT
    c.iban,
    GROUP_CONCAT(
        CASE
            WHEN ROW_NUMBER() OVER (PARTITION BY c.iban ORDER BY t.dt ASC) = 1 AND t.amount >= 0 THEN CAST(t.amount AS CHAR)
            WHEN t.amount >= 0 THEN CONCAT('+', t.amount)
            ELSE CAST(t.amount AS CHAR)
        END
        ORDER BY t.dt ASC
        SEPARATOR ' '
    ) AS transactions,
    SUM(t.amount) AS total
FROM
    customers c
JOIN
    transactions t
ON
    c.id = t.customer_id
GROUP BY
    c.iban
ORDER BY
    total DESC;



AI video processing service cost calculationSQL


SELECT
    t.hash AS hash,
    COUNT(p.id) AS processes,
    SUM(CASE
        WHEN p.is_parallel = 1 THEN 1
        ELSE 0
    END) AS total_parallel_processes,
    SUM(p.usage_time) AS total_usage_time,
    ROUND(SUM(CASE
        WHEN p.is_parallel = 1 THEN p.usage_time * 0.01 * 2
        ELSE p.usage_time * 0.01
    END), 2) AS total_cost
FROM
    tasks t
JOIN
    processes p ON t.id = p.task_id
GROUP BY
    t.hash
ORDER BY
    t.hash ASC;




online streaming service stream quality report

SELECT
    s.mac_address,
    COUNT(*) AS total_streams,

    -- Calculate and format traffic for 720p
    IFNULL(
        CASE
            WHEN SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END) >= 1024
            THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
            ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
        END,
    '0.00 MiB') AS "720p",

    -- Calculate and format traffic for 1080p
    IFNULL(
        CASE
            WHEN SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END) >= 1024
            THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
            ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
        END,
    '0.00 MiB') AS "1080p",

    -- Calculate and format traffic for 1440p
    IFNULL(
        CASE
            WHEN SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END) >= 1024
            THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
            ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
        END,
    '0.00 MiB') AS "1440p",

    -- Calculate and format traffic for 2160p
    IFNULL(
        CASE
            WHEN SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END) >= 1024
            THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
            ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
        END,
    '0.00 MiB') AS "2160p"
   
FROM
    streams s
GROUP BY
    s.mac_address
ORDER BY
    s.mac_address ASC;




SELECT
    s.mac_address,
    COUNT(*) AS total_streams,
   
    -- 720p traffic calculation and formatting
    CASE
        WHEN SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END) >= 1024
        THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
        ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '720p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
    END AS "720p",
   
    -- 1080p traffic calculation and formatting
    CASE
        WHEN SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END) >= 1024
        THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
        ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1080p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
    END AS "1080p",
   
    -- 1440p traffic calculation and formatting
    CASE
        WHEN SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END) >= 1024
        THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
        ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '1440p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
    END AS "1440p",
   
    -- 2160p traffic calculation and formatting
    CASE
        WHEN SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END) >= 1024
        THEN CONCAT(FORMAT(SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END) / 1024, 'N2'), ' GiB')
        ELSE CONCAT(FORMAT(SUM(CASE WHEN s.quality = '2160p' THEN s.traffic ELSE 0 END), 'N2'), ' MiB')
    END AS "2160p"
   
FROM
    streams s
GROUP BY
    s.mac_address
ORDER BY
    s.mac_address ASC;






credit and debit software


SELECT
    t.iban,
    -- Handle negative amounts by converting them to positive and enclosing them in parentheses
    CASE
        WHEN SUM(CASE WHEN t.amount < 0 THEN -t.amount ELSE 0 END) > 0
        THEN CONCAT('(', FORMAT(SUM(CASE WHEN t.amount < 0 THEN -t.amount ELSE 0 END), 'N2'), ')')
        ELSE '0.00'
    END AS debit,
   
    -- Positive transactions are handled normally
    FORMAT(SUM(CASE WHEN t.amount >= 0 THEN t.amount ELSE 0 END), 'N2') AS credit
FROM
    transactions t
GROUP BY
    t.iban
ORDER BY
    t.iban ASC;








1.       SBO - Counting Triplets



from collections import defaultdict

def countTriplets(arr, r):
    # Initialize dictionaries to keep track of potential pairs and triplets
    left_map = defaultdict(int)
    right_map = defaultdict(int)
   
    # Fill the right_map with the count of all elements in the array
    for num in arr:
        right_map[num] += 1
   
    triplet_count = 0
   
    # Iterate through each element in the array
    for num in arr:
        right_map[num] -= 1  # We're now processing this number, so reduce its count in right_map
       
        if num % r == 0:
            left_val = num // r  # This would be the first element in a triplet
            right_val = num * r  # This would be the third element in a triplet
           
            # Calculate how many valid triplets we can form with num as the middle element
            triplet_count += left_map[left_val] * right_map[right_val]
       
        # Move the current number to the left_map as we progress
        left_map[num] += 1
   
    return triplet_count

# Example usage:
arr = [1, 5, 5, 25, 125]
r = 5
print(countTriplets(arr, r))  # Output: 4

arr = [1, 3, 9, 9, 27, 81]
r = 3
print(countTriplets(arr, r))  # Output: 6
==============================



sbo no pairs allowed

def minimalOperations(words):
    # List to store the results for each word
    results = []

    # Go through each word in the list
    for word in words:
        # Start counting fixes needed for this word
        count = 0
        i = 0
        while i < len(word) - 1:
            # If two adjacent characters are the same
            if word[i] == word[i + 1]:
                count += 1  # Increment the fix counter
                i += 2  # Skip the next character because we just "fixed" this pair
            else:
                i += 1  # Move to the next character

        # Store the result for this word
        results.append(count)

    # Return the list of results
    return results

# Example usage:
words = ["ab", "aab", "abb", "abab", "aaaaaaba","abaaaba"]
print(minimalOperations(words))  # Output: [0, 1, 1, 0, 1]



approach 2



def minimalOperations(words):
    results = []
    for word in words:
        count = 0
        i = 0
        while i < len(word) - 1:
            if word[i] == word[i + 1]:
                count += 1
                i += 2  # Skip the next character since we've already "fixed" this pair
            else:
                i += 1
        results.append(count)
    return results

# Example usage:
words = ["ab", "aab", "abb", "abab", "aaaaaaba"]
print(minimalOperations(words))  # Output: [0, 1, 1, 0, 1]
=========================================================
sbo k smallest substring

def getSubstring(input_str, k):
    n = len(input_str)
    best_substring = None
    start = 0
    count_ones = 0

    for end in range(n):
        # Expand the window to include the current character
        if input_str[end] == '1':
            count_ones += 1
       
        # When we have exactly k '1's in the current window
        while count_ones == k:
            current_substring = input_str[start:end + 1]
           
            # Compare with the best substring found so far
            if (best_substring is None or
                len(current_substring) < len(best_substring) or
                (len(current_substring) == len(best_substring) and current_substring < best_substring)):
                best_substring = current_substring
           
            # Shrink the window from the left
            if input_str[start] == '1':
                count_ones -= 1
            start += 1

    return best_substring

# Example usage:
input_str = "0101101"
k = 3
print(getSubstring(input_str, k))  # Output: "1011"

input_str = "110011101"
k = 4
print(getSubstring(input_str, k))  # Output: "11101"

input_str = "10101"
k = 2
print(getSubstring(input_str, k))  # Output: "101"

input_str = "1110111"
k = 3
print(getSubstring(input_str, k))  # Output: "111"

============================================================================================================================


SB Minimize array cost

def getMinimumCost(arr):
    n = len(arr)
   
    # Initial cost of the array
    initial_cost = sum((arr[i] - arr[i-1]) ** 2 for i in range(1, n))
   
    # Variable to track the minimum cost found
    min_cost = float('inf')
   
    # Iterate over each possible place to insert a new element
    for i in range(1, n):
        # Possible new value that minimizes the cost between arr[i-1] and arr[i]
        new_value = (arr[i-1] + arr[i]) // 2
       
        # Calculate the cost if we insert new_value between arr[i-1] and arr[i]
        new_cost = (
            initial_cost
            - (arr[i] - arr[i-1]) ** 2
            + (new_value - arr[i-1]) ** 2
            + (arr[i] - new_value) ** 2
        )
       
        # Update min_cost if the new_cost is lower
        if new_cost < min_cost:
            min_cost = new_cost
   
    return min_cost

# Example usage:
arr = [1, 3, 5, 2, 10]
print(getMinimumCost(arr))  # Output: 49




tv series | period 

import requests
import re

def showsInProduction(startYear, endYear):
    base_url = "https://jsonmock.hackerrank.com/api/tvseries"
    current_page = 1
    shows = []

    while True:
        # Fetch data from the API
        response = requests.get(f"{base_url}?page={current_page}")
        data = response.json()

        for show in data['data']:
            runtime = show['runtime_of_series']
           
            # Extract years using regex to handle different formats
            match = re.search(r'(\d{4})(?:-(\d{4})?)?', runtime)
            if match:
                start = int(match.group(1))
                end = int(match.group(2)) if match.group(2) else -1

                # Apply filtering conditions
                if startYear <= start and (endYear == -1 or end <= endYear or end == -1):
                    shows.append(show['name'])

        # Check if we have more pages to process
        if current_page >= data['total_pages']:
            break

        # Move to the next page
        current_page += 1

    # Return the sorted list of shows
    return sorted(shows)

# Example usage:
startYear = 2006
endYear = 2011
result = showsInProduction(startYear, endYear)
for show in result:
    print(show)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#1. Pulse Rate

import requests
import math

def get_records(page_num):
    url = f"https://jsonmock.hackerrank.com/api/medical_records?page={page_num}"    
    response = requests.get(url)
    return response.json()

def pulseRate(diagnosisName, doctorId):
    # Fetch the first page to determine the total number of pages
    initial_data = get_records(1)
    total_pages = initial_data['total_pages']

    matching_pulse_rates = []

    # Loop through all pages to gather matching records
    for page in range(1, total_pages + 1):
        data = get_records(page)
        for record in data['data']:
            if (record['doctor']['id'] == doctorId and
                record['diagnosis']['name'] == diagnosisName):
                print(record)
                matching_pulse_rates.append(record['vitals']['pulse'])

    # Calculate the average pulse rate and truncate to an integer
    if matching_pulse_rates:
        average_pulse_rate = sum(matching_pulse_rates) / len(matching_pulse_rates)        
        return math.trunc(average_pulse_rate)
    else:
        return 0

# Example usage
diagnosis_name = "Pulmonary embolism"
doctor_id = 2
print("")
print("Average Pulse Rate",pulseRate(diagnosis_name, doctor_id))

Output

{'id': 1, 'timestamp': 1565637002408, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 154, 'bloodPressureSystole': 91, 'pulse': 125, 'breathingRate': 32, 'bodyTemperature': 100}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 2, 'userName': 'Bob Martin', 'userDob': '14-09-1989', 'meta': {'height': 174, 'weight': 172}}
{'id': 6, 'timestamp': 1568550058964, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 155, 'bloodPressureSystole': 90, 'pulse': 130, 'breathingRate': 29, 'bodyTemperature': 99.2}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 1, 'userName': 'John Oliver', 'userDob': '02-01-1986', 'meta': {'height': 168, 'weight': 173}}
{'id': 9, 'timestamp': 1548036340751, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 147, 'bloodPressureSystole': 96, 'pulse': 130, 'breathingRate': 28, 'bodyTemperature': 101}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 3, 'userName': 'Helena Fernandez', 'userDob': '23-12-1987', 'meta': {'height': 157, 'weight': 106}}
{'id': 18, 'timestamp': 1560177927736, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 141, 'bloodPressureSystole': 96, 'pulse': 123, 'breathingRate': 29, 'bodyTemperature': 99}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 3, 'userName': 'Helena Fernandez', 'userDob': '23-12-1987', 'meta': {'height': 157, 'weight': 103}}
{'id': 20, 'timestamp': 1549184918171, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 145, 'bloodPressureSystole': 94, 'pulse': 125, 'breathingRate': 25, 'bodyTemperature': 102.6}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 2, 'userName': 'Bob Martin', 'userDob': '14-09-1989', 'meta': {'height': 174, 'weight': 181}}
{'id': 24, 'timestamp': 1563805161434, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 144, 'bloodPressureSystole': 92, 'pulse': 137, 'breathingRate': 34, 'bodyTemperature': 102.5}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 1, 'userName': 'John Oliver', 'userDob': '02-01-1986', 'meta': {'height': 168, 'weight': 191}}
{'id': 25, 'timestamp': 1551539005307, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 154, 'bloodPressureSystole': 90, 'pulse': 131, 'breathingRate': 22, 'bodyTemperature': 103}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 3, 'userName': 'Helena Fernandez', 'userDob': '23-12-1987', 'meta': {'height': 157, 'weight': 107}}
{'id': 28, 'timestamp': 1550268297157, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 154, 'bloodPressureSystole': 99, 'pulse': 125, 'breathingRate': 33, 'bodyTemperature': 100.1}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 4, 'userName': 'Francesco De Mello', 'userDob': '02-05-1994', 'meta': {'height': 183, 'weight': 195}}
{'id': 36, 'timestamp': 1548913424982, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 155, 'bloodPressureSystole': 96, 'pulse': 130, 'breathingRate': 24, 'bodyTemperature': 99.3}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 4, 'userName': 'Francesco De Mello', 'userDob': '02-05-1994', 'meta': {'height': 183, 'weight': 212}}
{'id': 56, 'timestamp': 1556411602393, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 150, 'bloodPressureSystole': 90, 'pulse': 122, 'breathingRate': 27, 'bodyTemperature': 102.8}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 3, 'userName': 'Helena Fernandez', 'userDob': '23-12-1987', 'meta': {'height': 157, 'weight': 109}}
{'id': 92, 'timestamp': 1564291090683, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 151, 'bloodPressureSystole': 93, 'pulse': 136, 'breathingRate': 27, 'bodyTemperature': 101.7}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 1, 'userName': 'John Oliver', 'userDob': '02-01-1986', 'meta': {'height': 168, 'weight': 183}}
{'id': 96, 'timestamp': 1550084268468, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 143, 'bloodPressureSystole': 95, 'pulse': 123, 'breathingRate': 34, 'bodyTemperature': 101}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 2, 'userName': 'Bob Martin', 'userDob': '14-09-1989', 'meta': {'height': 174, 'weight': 177}}
{'id': 98, 'timestamp': 1568922902985, 'diagnosis': {'id': 3, 'name': 'Pulmonary embolism', 'severity': 4}, 'vitals': {'bloodPressureDiastole': 140, 'bloodPressureSystole': 93, 'pulse': 140, 'breathingRate': 31, 'bodyTemperature': 102}, 'doctor': {'id': 2, 'name': 'Dr Arnold Bullock'}, 'userId': 1, 'userName': 'John Oliver', 'userDob': '02-01-1986', 'meta': {'height': 168, 'weight': 189}}
Average Pulse Rate 129



---------------------------------------------------------------------------------------------------------------------------------------------


#2. Maximum Transfer
import requests

import locale

def maximumTransfer(name, city):
    
    # Initialize variables to store the maximum credit and debit amounts
    max_credit = 0.0
    max_debit = 0.0
    # Initialize the page number to 1 and the base API URL
    page = 1
    base_url = 'https://jsonmock.hackerrank.com/api/transactions'
    while True:
        # Make the API request with the current page number
        response = requests.get(f'{base_url}?page={page}')
        data = response.json()
        
        # Iterate through the transaction records in the data
        for record in data['data']:
            # Filter records based on the given name and city
            if record['userName'] == name and record['location']['city'] == city:
                amount = float(record['amount'].replace('$', '').replace(',', ''))
                print(amount)
                # Update the maximum credit and debit amounts if applicable
                if record['txnType'] == 'credit':
                    max_credit = max(max_credit, amount)
                elif record['txnType'] == 'debit':
                    max_debit = max(max_debit, amount)

        # Check if there are more pages to retrieve
        if page < data['total_pages']:
            page += 1
        else:
            # If there are no more pages, break out of the loop
            break

      # Set the locale to en_US to format numbers as dollars

    locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    # Format the results as strings in dollar format
    credit_amount_str = locale.currency(max_credit, grouping=True)
    debit_amount_str = locale.currency(max_debit, grouping=True)
    # Return the results as a list of strings
    return [credit_amount_str, debit_amount_str]

maximumTransfer("John Oliver","Ripley")

Output

1670.57
3102.22
2277.37
967.38
1499.55
3467.44
2950.13
3066.39
422.88
3321.83
426.65
3765.71
3618.75
['$3,618.75', '$3,765.71']




---------------------------------------------------------------------------------------------------------------------------------------------


#3 REST API : Body Temperature

import requests

def getAverageTemperatureForUser(user_id):
    base_url = "https://jsonmock.hackerrank.com/api/medical_records"
    page = 1
    print("Page : ",page)
    total_temps = 0
    total_records = 0
    while True:
        response = requests.get(f"{base_url}?userid={user_id}&page={page}").json()
        data = response["data"]
        if not data:
            break
        for record in data:
            body_temperature = record["vitals"]["bodyTemperature"]            
            print("          Body Temperature",body_temperature)
            total_temps += body_temperature
            total_records += 1
            
        if page >= response["total_pages"]:
            break

        page += 1
        print("Page : ",page)
    if total_records == 0:
        return "0"
    
    print("")
    print("Total Records -> ",total_records)
    print("Sum of Temperature of all Patients -> ",total_temps)
    average_temp = round(total_temps / total_records, 1)
    return str(average_temp)

getAverageTemperatureForUser("1")

Output
Page :  1
          Body Temperature 100
          Body Temperature 99.4
          Body Temperature 100.8
          Body Temperature 97
          Body Temperature 102.5
          Body Temperature 99.2
          Body Temperature 100
          Body Temperature 101.5
          Body Temperature 101
          Body Temperature 103.8
Page :  2
          Body Temperature 101.9
          Body Temperature 99.2
          Body Temperature 101.3
          Body Temperature 97.3
          Body Temperature 99.3
          Body Temperature 99.9
          Body Temperature 103.4
          Body Temperature 99
          Body Temperature 100.4
          Body Temperature 102.6
Page :  3
          Body Temperature 102.3
          Body Temperature 97.1
          Body Temperature 101.8
          Body Temperature 102.5
          Body Temperature 103
          Body Temperature 99.2
          Body Temperature 99.2
          Body Temperature 100.1
          Body Temperature 102.3
          Body Temperature 98.6
Page :  4
          Body Temperature 102.9
          Body Temperature 97.8
          Body Temperature 99.7
          Body Temperature 102.9
          Body Temperature 100.7
          Body Temperature 99.3
          Body Temperature 100.9
          Body Temperature 99.9
          Body Temperature 99.8
          Body Temperature 98.3
Page :  5
          Body Temperature 103
          Body Temperature 97.7
          Body Temperature 101
          Body Temperature 99.4
          Body Temperature 100.6
          Body Temperature 97.3
          Body Temperature 99.7
          Body Temperature 101.4
          Body Temperature 102.6
          Body Temperature 100.8
Page :  6
          Body Temperature 99.2
          Body Temperature 100.1
          Body Temperature 103.8
          Body Temperature 102
          Body Temperature 99.8
          Body Temperature 102.8
          Body Temperature 102.4
          Body Temperature 103.9
          Body Temperature 103.7
          Body Temperature 99.1
Page :  7
          Body Temperature 97.9
          Body Temperature 102.4
          Body Temperature 101.2
          Body Temperature 99.5
          Body Temperature 104
          Body Temperature 104
          Body Temperature 97.3
          Body Temperature 99.4
          Body Temperature 102.9
          Body Temperature 100.1
Page :  8
          Body Temperature 99.8
          Body Temperature 98.8
          Body Temperature 100.9
          Body Temperature 97
          Body Temperature 99.1
          Body Temperature 102
          Body Temperature 100
          Body Temperature 100
          Body Temperature 100.8
          Body Temperature 99.3
Page :  9
          Body Temperature 99.2
          Body Temperature 99.5
          Body Temperature 103.5
          Body Temperature 103
          Body Temperature 102.2
          Body Temperature 100.2
          Body Temperature 98.9
          Body Temperature 102.7
          Body Temperature 97.8
          Body Temperature 103.8
Page :  10
          Body Temperature 100.3
          Body Temperature 101.7
          Body Temperature 98.6
          Body Temperature 97.1
          Body Temperature 99.6
          Body Temperature 101
          Body Temperature 99.5
          Body Temperature 102
          Body Temperature 103.3

Total Records ->  99
Sum of Temperature of all Patients ->  9958.400000000001
'100.6'

---------------------------------------------------------------------------------------------------------------------------------------------




REST API :- Highest international students

---------------------------------------------------------------------------------------------------------------------------------------------
import requests

def highestInternationalStudents(firstCity, secondCity):
    base_url = "https://jsonmock.hackerrank.com/api/universities"
    page = 1
    highest_university = ""
    max_international_students = -1
    
    while True:
        # Fetch data from the API
        response = requests.get(f"{base_url}?page={page}")
        data = response.json()

        # Check if the response contains the expected 'data' field
        if 'data' not in data or len(data['data']) == 0:
            break  # Exit if no data is found

        # Process the universities in the current page
        for university in data['data']:
            if 'location' in university and university['location']['city'] in [firstCity, secondCity]:
                num_international_students = int(university['international_students'].replace(',', ''))

                if num_international_students > max_international_students:
                    max_international_students = num_international_students
                    highest_university = university['university']

        # Check if more pages exist
        if 'total_pages' in data and page >= data['total_pages']:
            break
        page += 1
    
    return highest_university

# Example usage:
firstCity = "Stanford"
secondCity = "Zürich"
print(highestInternationalStudents(firstCity, secondCity))  # Output should be the university with the highest number of international students
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rest API Asteroid monitoring station 

import requests

year = int(input("Enter the year: "))
orbitClass = input("Enter the orbit class: ").lower()
# print(orbitClass)
response = requests.get('https://jsonmock.hackerrank.com/api/asteroids/search?=' + orbitClass + '&page=1').json()


total_pages = response['total_pages']
per_page = response['per_page']

ans = []

for i in range(1, total_pages + 1):
    temp_response = requests.get('https://jsonmock.hackerrank.com/api/asteroids/search?orbit_class=' + orbitClass + '&page='+ str(i)).json()

    temp_ans = []
    for j in range(per_page):
        try:
            temp_ans.append(temp_response['data'][j])

        except:
            pass

    data = sorted(temp_ans, key=lambda x: (float(x.get('period_yr', '1')), x['designation']))
    n = len(data)
    for k in range(n):
        if int(data[k]['discovery_date'][0:4]) == year:
            ans.append(data[k]['designation'])

m = len(ans)
for i in range(m):
    print(ans[i])

----------------------------------------------------------------------------------------------------------------------------------------------------------------
City Weather station
import requests

def weatherStation(keyword: str):
    base_url = "https://jsonmock.hackerrank.com/api/weather/search?name="
    results = []
    page = 1
    
    while True:
        # Fetch data from the API for the current page
        response = requests.get(f"{base_url}{keyword}&page={page}")
        data = response.json()
        
        # Check if there is data to process
        if 'data' not in data or len(data['data']) == 0:
            break
        
        # Process each city record in the current page
        for record in data['data']:
            city_name = record['name']
            temperature = record['weather'].split()[0]  # Get the temperature number
            wind_speed = record['status'][0].split(": ")[1].replace('Kmph', '')  # Extract wind speed
            humidity = record['status'][1].split(": ")[1].replace('%', '')  # Extract humidity
            
            # Create the required format: "city_name,temperature,wind_speed,humidity"
            formatted_record = f"{city_name},{temperature},{wind_speed},{humidity}"
            results.append(formatted_record)
        
        # Check if we need to fetch the next page
        if page >= data['total_pages']:
            break
        page += 1
    
    # Sort results by city name
    results.sort()
    
    return results

# Example usage:
keyword = "Am"
print(weatherStation(keyword))
